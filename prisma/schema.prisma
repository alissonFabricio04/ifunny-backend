generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  id        String   @id @default(uuid())
  firstName String   @db.VarChar(100)
  surname   String   @db.VarChar(100)
  cpf       String   @unique
  telephone String   @unique
  email     String   @unique @db.VarChar(255)
  password  String
  isActive  Boolean  @default(false)
  createdAt DateTime @default(now())

  // fk_wallet String @unique
  // Wallet    Wallet @relation(fields: [fk_wallet], references: [id])

  // Admins         Admins?
  // ChargingOrders Order[]
  // Transactions   Transactions[]
  // Wallet         Wallet[]
  Admins Admins?
}

model Admins {
  id       String  @id @default(uuid())
  isActive Boolean @default(false)

  fk_client      String           @unique
  Client         Client           @relation(fields: [fk_client], references: [id])
  ChargingPoints ChargingPoints[]
}

enum ChargingPointsStatus {
  FREE
  BUSY
  UNDER_CONSTRUCTION
}

model ChargingPoints {
  id         String               @id @default(uuid())
  status     ChargingPointsStatus
  latitude   Float                @unique
  longitude  Float                @unique
  address    String
  complement String?
  country    String
  city       String
  state      String
  zip        String
  createdAt  DateTime             @default(now())

  fk_admin String
  admin    Admins @relation(fields: [fk_admin], references: [id])

  // Orders Order[]
}

// model Wallet {
//   id     String  @id @default(uuid())
//   amount Decimal

//   Client       Client?        @relation(fields: [clientId], references: [id])
//   Transactions Transactions[]
//   clientId     String?
// }

// model Transactions {
//   id          String   @id @default(uuid())
//   amount      Decimal
//   description String
//   createdAt   DateTime @default(now())

//   fk_wallet String
//   Wallet    Wallet @relation(fields: [fk_wallet], references: [id])

//   fk_client String
//   Client    Client @relation(fields: [fk_client], references: [id])
// }

// model Order {
//   id                 String   @id @default(uuid())
//   amount             Decimal
//   reserve            Decimal
//   reserve_expiration DateTime

//   fk_client String
//   Client    Client @relation(fields: [fk_client], references: [id])

//   fk_payment    String
//   paymentMethod Payments @relation(fields: [fk_payment], references: [id])

//   fk_order_status String
//   orderStatus     OrderStatus @relation(fields: [fk_order_status], references: [id])

//   fk_charging_point String?
//   ChargingPoints    ChargingPoints? @relation(fields: [fk_charging_point], references: [id])

//   updated_at DateTime @updatedAt()
//   createdAt  DateTime @default(now())
// }

// model OrderStatus {
//   id     String @id @default(uuid())
//   status String @unique // WAITING_PAYMENT, PENDING, COMPLETED, CANCELLED

//   ChargingOrders Order[]
// }

// model Payments {
//   id       String  @id @default(uuid())
//   subtotal Decimal

//   payment_type String
//   PaymentType  PaymentType @relation(fields: [payment_type], references: [id])

//   payment_status String
//   PaymentStatus  PaymentStatus @relation(fields: [payment_status], references: [id])

//   checkout_url     String?   @unique
//   confimation_date DateTime?
//   payload          Json?

//   updated_at DateTime @updatedAt()
//   created_at DateTime @default(now())

//   ChargingOrders Order[]
// }

// model PaymentType {
//   id       String     @id @default(uuid())
//   name     String     @unique // FUNDS, PIX, CREDIT_CARD
//   Payement Payments[]
// }

// model PaymentStatus {
//   id       String     @id @default(uuid())
//   name     String     @unique // WAITING_PAYMENT, PAID, CANCELLED
//   Payement Payments[]
// }
